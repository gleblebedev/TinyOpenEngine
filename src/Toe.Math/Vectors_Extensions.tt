<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System.IO;
using System.Numerics;

namespace Toe
{
<#
var types = new []{
    new { Suffix = "", ComponentType = "float", Components = 2 },
    new { Suffix = "", ComponentType = "float", Components = 3 },
    new { Suffix = "", ComponentType = "float", Components = 4 },
    new { Suffix = "d", ComponentType = "double", Components = 2 },
    new { Suffix = "d", ComponentType = "double", Components = 3 },
    new { Suffix = "d", ComponentType = "double", Components = 4 },
    new { Suffix = "i", ComponentType = "int", Components = 2 },
    new { Suffix = "i", ComponentType = "int", Components = 3 },
    new { Suffix = "i", ComponentType = "int", Components = 4 },
    new { Suffix = "us", ComponentType = "ushort", Components = 4 },
    new { Suffix = "ub", ComponentType = "byte", Components = 4 },
    new { Suffix = "l", ComponentType = "long", Components = 2 },
    new { Suffix = "l", ComponentType = "long", Components = 3 },
    new { Suffix = "l", ComponentType = "long", Components = 4 },
    new { Suffix = "b", ComponentType = "bool", Components = 2 },
    new { Suffix = "b", ComponentType = "bool", Components = 3 },
    new { Suffix = "b", ComponentType = "bool", Components = 4 },
};
var components = new []{"X","Y","Z","W"};
#>
    public static partial class MathExtensionMethods
	{
<#
foreach (var type in types)
{
    var typeName = "Vector"+type.Components+type.Suffix;
#>
        public static void Write(this BinaryWriter writer, in <#=typeName#> vec)
		{
<#
foreach (var c in components.Take(type.Components))
{
#>
            writer.Write(vec.<#=c#>);
<#
}
#>
		}

        public static <#=typeName#> Read<#=typeName#>(this BinaryReader reader)
        {
<#
foreach (var c in components.Take(type.Components))
{
	string readFunction = "ReadSingle";
	switch (type.ComponentType)
	{
		case "float":
			readFunction = "ReadSingle";
			break;
		case "double":
			readFunction = "ReadDouble";
			break;
		case "int":
			readFunction = "ReadInt32";
			break;
		case "long":
			readFunction = "ReadInt64";
			break;
		case "byte":
			readFunction = "ReadByte";
			break;
		case "ushort":
			readFunction = "ReadUInt16";
			break;
		case "bool":
			readFunction = "ReadBoolean";
			break;
	}
#>
            var <#=c#> = reader.<#=readFunction#>();
<#
}
#>
            return new <#=typeName#>(<#=string.Join(", ", components.Take(type.Components))#>);
        }
<#
}
#>
	}
}