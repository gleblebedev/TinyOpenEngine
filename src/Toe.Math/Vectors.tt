<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;

namespace Toe
{
<#
var types = new []{
	new { Suffix = "d", ComponentType = "double", Components = 2 },
	new { Suffix = "d", ComponentType = "double", Components = 3 },
	new { Suffix = "d", ComponentType = "double", Components = 4 },
	new { Suffix = "i", ComponentType = "int", Components = 2 },
	new { Suffix = "i", ComponentType = "int", Components = 3 },
	new { Suffix = "i", ComponentType = "int", Components = 4 },
	new { Suffix = "l", ComponentType = "long", Components = 2 },
	new { Suffix = "l", ComponentType = "long", Components = 3 },
	new { Suffix = "l", ComponentType = "long", Components = 4 },
	new { Suffix = "b", ComponentType = "bool", Components = 2 },
	new { Suffix = "b", ComponentType = "bool", Components = 3 },
	new { Suffix = "b", ComponentType = "bool", Components = 4 },
};
var components = new []{"X","Y","Z","W"};
foreach (var type in types)
{
	var typeName = "Vector"+type.Components+type.Suffix;
#>
	public partial struct <#=typeName#>: IEquatable<<#=typeName#>>, IEnumerable<<#=type.ComponentType#>>, IEnumerable
	{
<#
for (var component=0; component<type.Components; ++component)
{
#>	
        /// <summary>
        /// The <#=components[component]#> component of the vector.
        /// </summary>
        public <#=type.ComponentType#> <#=components[component]#>;
<#
}
#>

        public <#=typeName#>(<#= string.Join(", ", components.Take(type.Components).Select(_=>type.ComponentType+" "+_)) #>)
        {
<#
for (var component=0; component<type.Components; ++component)
{
#>            this.<#=components[component]#> = <#=components[component]#>;
<#
}
#>
        }

        /// <summary>Returns an enumerator that iterates through the collection.</summary>
        /// <returns>An enumerator that can be used to iterate through the collection.</returns>
        public IEnumerator<<#=type.ComponentType#>> GetEnumerator()
        {
<#
for (var component=0; component<type.Components; ++component)
{
#>            yield return this.<#=components[component]#>;
<#
}
#>        }

        /// <summary>Returns an enumerator that iterates through a collection.</summary>
        /// <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        /// <summary>
        /// Returns a boolean indicating whether the given Object is equal to this Vector3 instance.
        /// </summary>
        /// <param name="obj">The Object to compare against.</param>
        /// <returns>True if the Object is equal to this Vector3; False otherwise.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override bool Equals(object obj)
        {
            if (!(obj is <#=typeName#>))
                return false;
            return Equals((<#=typeName#>)obj);
        }

        /// <summary>
        /// Returns a boolean indicating whether the two given vectors are equal.
        /// </summary>
        /// <param name="left">The first vector to compare.</param>
        /// <param name="right">The second vector to compare.</param>
        /// <returns>True if the vectors are equal; False otherwise.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator ==(<#=typeName#> left, <#=typeName#> right)
        {
            return 
<#
for (var component=0; component<type.Components; ++component)
{
#>                <#=(component!=0)?"&&":"  " #> left.<#=components[component]#> == right.<#=components[component]#>
<#
}
#>                ;
        }

		/// <summary>
        /// Returns a boolean indicating whether the two given vectors are not equal.
        /// </summary>
        /// <param name="left">The first vector to compare.</param>
        /// <param name="right">The second vector to compare.</param>
        /// <returns>True if the vectors are not equal; False if they are equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator !=(<#=typeName#> left, <#=typeName#> right)
        {
            return 
<#
for (var component=0; component<type.Components; ++component)
{
#>                <#=(component!=0)?"&&":"  " #> left.<#=components[component]#> != right.<#=components[component]#>
<#
}
#>                ;
        }

		/// <summary>
        /// Returns a boolean indicating whether the given <#=typeName#> is equal to this <#=typeName#> instance.
        /// </summary>
        /// <param name="other">The <#=typeName#> to compare this instance to.</param>
        /// <returns>True if the other <#=typeName#> is equal to this instance; False otherwise.</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(<#=typeName#> other)
        {
            return 
<#
for (var component=0; component<type.Components; ++component)
{
#>                <#=(component!=0)?"&&":"  " #> <#=components[component]#> == other.<#=components[component]#>
<#
}
#>                ;
        }

		/// <summary>Returns the hash code for this instance.</summary>
        /// <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = <#=components[0]#>.GetHashCode();
<#
for (var component=1; component<type.Components; ++component)
{
#>                hashCode = (hashCode * 397) ^ <#=components[component]#>.GetHashCode();
<#
}
#>
                return hashCode;
            }
        }
	}

<#
}
#>
}